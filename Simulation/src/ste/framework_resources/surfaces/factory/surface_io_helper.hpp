//	StE
// © Shlomi Steinberg 2015-2017

#pragma once

#include <stdafx.hpp>
#include <format.hpp>

namespace ste {
namespace resource {

namespace surface_io_helper {

template <std::uint8_t ch0, std::uint8_t ch1, std::uint8_t ch2, std::uint8_t ch3>
constexpr auto make_magic() {
	constexpr auto a = (static_cast<std::uint32_t>(ch3) << 24) & 0xFF000000;
	constexpr auto b = (static_cast<std::uint32_t>(ch2) << 16) & 0x00FF0000;
	constexpr auto c = (static_cast<std::uint32_t>(ch1) << 8) & 0x0000FF00;
	constexpr auto d = static_cast<std::uint32_t>(ch0) & 0x000000FF;
	return a | b | c | d;
}

static constexpr std::uint8_t magic_dds[] = { 'D', 'D', 'S', ' ' };
static constexpr std::uint8_t magic_ktx10[] =
	{ 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A };
static constexpr std::uint8_t magic_ktx20[] =
	{ 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x32, 0x30, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A };

enum class d3dfmt : std::uint32_t {
	D3DFMT_UNKNOWN = 0,

	D3DFMT_R8G8B8 = 20,
	D3DFMT_A8R8G8B8 = 21,
	D3DFMT_X8R8G8B8 = 22,
	D3DFMT_R5G6B5 = 23,
	D3DFMT_X1R5G5B5 = 24,
	D3DFMT_A1R5G5B5 = 25,
	D3DFMT_A4R4G4B4 = 26,
	D3DFMT_R3G3B2 = 27,
	D3DFMT_A8 = 28,
	D3DFMT_A8R3G3B2 = 29,
	D3DFMT_X4R4G4B4 = 30,
	D3DFMT_A2B10G10R10 = 31,
	D3DFMT_A8B8G8R8 = 32,
	D3DFMT_X8B8G8R8 = 33,
	D3DFMT_G16R16 = 34,
	D3DFMT_A2R10G10B10 = 35,
	D3DFMT_A16B16G16R16 = 36,

	D3DFMT_A8P8 = 40,
	D3DFMT_P8 = 41,

	D3DFMT_L8 = 50,
	D3DFMT_A8L8 = 51,
	D3DFMT_A4L4 = 52,

	D3DFMT_V8U8 = 60,
	D3DFMT_L6V5U5 = 61,
	D3DFMT_X8L8V8U8 = 62,
	D3DFMT_Q8W8V8U8 = 63,
	D3DFMT_V16U16 = 64,
	D3DFMT_A2W10V10U10 = 67,

	D3DFMT_UYVY = make_magic<'U', 'Y', 'V', 'Y'>(),
	D3DFMT_R8G8_B8G8 = make_magic<'R', 'G', 'B', 'G'>(),
	D3DFMT_YUY2 = make_magic<'Y', 'U', 'Y', '2'>(),
	D3DFMT_G8R8_G8B8 = make_magic<'G', 'R', 'G', 'B'>(),
	D3DFMT_DXT1 = make_magic<'D', 'X', 'T', '1'>(),
	D3DFMT_DXT2 = make_magic<'D', 'X', 'T', '2'>(),
	D3DFMT_DXT3 = make_magic<'D', 'X', 'T', '3'>(),
	D3DFMT_DXT4 = make_magic<'D', 'X', 'T', '4'>(),
	D3DFMT_DXT5 = make_magic<'D', 'X', 'T', '5'>(),

	D3DFMT_ATI1 = make_magic<'A', 'T', 'I', '1'>(),
	D3DFMT_AT1N = make_magic<'A', 'T', '1', 'N'>(),
	D3DFMT_ATI2 = make_magic<'A', 'T', 'I', '2'>(),
	D3DFMT_AT2N = make_magic<'A', 'T', '2', 'N'>(),

	D3DFMT_BC4U = make_magic<'B', 'C', '4', 'U'>(),
	D3DFMT_BC4S = make_magic<'B', 'C', '4', 'S'>(),
	D3DFMT_BC5U = make_magic<'B', 'C', '5', 'U'>(),
	D3DFMT_BC5S = make_magic<'B', 'C', '5', 'S'>(),

	D3DFMT_ETC = make_magic<'E', 'T', 'C', ' '>(),
	D3DFMT_ETC1 = make_magic<'E', 'T', 'C', '1'>(),
	D3DFMT_ATC = make_magic<'A', 'T', 'C', ' '>(),
	D3DFMT_ATCA = make_magic<'A', 'T', 'C', 'A'>(),
	D3DFMT_ATCI = make_magic<'A', 'T', 'C', 'I'>(),

	D3DFMT_POWERVR_2BPP = make_magic<'P', 'T', 'C', '2'>(),
	D3DFMT_POWERVR_4BPP = make_magic<'P', 'T', 'C', '4'>(),

	D3DFMT_D16_LOCKABLE = 70,
	D3DFMT_D32 = 71,
	D3DFMT_D15S1 = 73,
	D3DFMT_D24S8 = 75,
	D3DFMT_D24X8 = 77,
	D3DFMT_D24X4S4 = 79,
	D3DFMT_D16 = 80,

	D3DFMT_D32F_LOCKABLE = 82,
	D3DFMT_D24FS8 = 83,

	D3DFMT_L16 = 81,

	D3DFMT_VERTEXDATA = 100,
	D3DFMT_INDEX16 = 101,
	D3DFMT_INDEX32 = 102,

	D3DFMT_Q16W16V16U16 = 110,

	D3DFMT_MULTI2_ARGB8 = make_magic<'M', 'E', 'T', '1'>(),

	D3DFMT_R16F = 111,
	D3DFMT_G16R16F = 112,
	D3DFMT_A16B16G16R16F = 113,

	D3DFMT_R32F = 114,
	D3DFMT_G32R32F = 115,
	D3DFMT_A32B32G32R32F = 116,

	D3DFMT_CxV8U8 = 117,

	D3DFMT_DX10 = make_magic<'D', 'X', '1', '0'>(),

	D3DFMT_FORCE_DWORD = 0x7fffffff
};

enum class dxgi_format_dds : std::uint32_t {
	DXGI_FORMAT_UNKNOWN = 0,
	DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
	DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
	DXGI_FORMAT_R32G32B32A32_UINT = 3,
	DXGI_FORMAT_R32G32B32A32_SINT = 4,
	DXGI_FORMAT_R32G32B32_TYPELESS = 5,
	DXGI_FORMAT_R32G32B32_FLOAT = 6,
	DXGI_FORMAT_R32G32B32_UINT = 7,
	DXGI_FORMAT_R32G32B32_SINT = 8,
	DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
	DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
	DXGI_FORMAT_R16G16B16A16_UNORM = 11,
	DXGI_FORMAT_R16G16B16A16_UINT = 12,
	DXGI_FORMAT_R16G16B16A16_SNORM = 13,
	DXGI_FORMAT_R16G16B16A16_SINT = 14,
	DXGI_FORMAT_R32G32_TYPELESS = 15,
	DXGI_FORMAT_R32G32_FLOAT = 16,
	DXGI_FORMAT_R32G32_UINT = 17,
	DXGI_FORMAT_R32G32_SINT = 18,
	DXGI_FORMAT_R32G8X24_TYPELESS = 19,
	DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
	DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
	DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
	DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
	DXGI_FORMAT_R10G10B10A2_UNORM = 24,
	DXGI_FORMAT_R10G10B10A2_UINT = 25,
	DXGI_FORMAT_R11G11B10_FLOAT = 26,
	DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
	DXGI_FORMAT_R8G8B8A8_UNORM = 28,
	DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
	DXGI_FORMAT_R8G8B8A8_UINT = 30,
	DXGI_FORMAT_R8G8B8A8_SNORM = 31,
	DXGI_FORMAT_R8G8B8A8_SINT = 32,
	DXGI_FORMAT_R16G16_TYPELESS = 33,
	DXGI_FORMAT_R16G16_FLOAT = 34,
	DXGI_FORMAT_R16G16_UNORM = 35,
	DXGI_FORMAT_R16G16_UINT = 36,
	DXGI_FORMAT_R16G16_SNORM = 37,
	DXGI_FORMAT_R16G16_SINT = 38,
	DXGI_FORMAT_R32_TYPELESS = 39,
	DXGI_FORMAT_D32_FLOAT = 40,
	DXGI_FORMAT_R32_FLOAT = 41,
	DXGI_FORMAT_R32_UINT = 42,
	DXGI_FORMAT_R32_SINT = 43,
	DXGI_FORMAT_R24G8_TYPELESS = 44,
	DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
	DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
	DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
	DXGI_FORMAT_R8G8_TYPELESS = 48,
	DXGI_FORMAT_R8G8_UNORM = 49,
	DXGI_FORMAT_R8G8_UINT = 50,
	DXGI_FORMAT_R8G8_SNORM = 51,
	DXGI_FORMAT_R8G8_SINT = 52,
	DXGI_FORMAT_R16_TYPELESS = 53,
	DXGI_FORMAT_R16_FLOAT = 54,
	DXGI_FORMAT_D16_UNORM = 55,
	DXGI_FORMAT_R16_UNORM = 56,
	DXGI_FORMAT_R16_UINT = 57,
	DXGI_FORMAT_R16_SNORM = 58,
	DXGI_FORMAT_R16_SINT = 59,
	DXGI_FORMAT_R8_TYPELESS = 60,
	DXGI_FORMAT_R8_UNORM = 61,
	DXGI_FORMAT_R8_UINT = 62,
	DXGI_FORMAT_R8_SNORM = 63,
	DXGI_FORMAT_R8_SINT = 64,
	DXGI_FORMAT_A8_UNORM = 65,
	DXGI_FORMAT_R1_UNORM = 66,
	DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
	DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
	DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
	DXGI_FORMAT_BC1_TYPELESS = 70,
	DXGI_FORMAT_BC1_UNORM = 71,
	DXGI_FORMAT_BC1_UNORM_SRGB = 72,
	DXGI_FORMAT_BC2_TYPELESS = 73,
	DXGI_FORMAT_BC2_UNORM = 74,
	DXGI_FORMAT_BC2_UNORM_SRGB = 75,
	DXGI_FORMAT_BC3_TYPELESS = 76,
	DXGI_FORMAT_BC3_UNORM = 77,
	DXGI_FORMAT_BC3_UNORM_SRGB = 78,
	DXGI_FORMAT_BC4_TYPELESS = 79,
	DXGI_FORMAT_BC4_UNORM = 80,
	DXGI_FORMAT_BC4_SNORM = 81,
	DXGI_FORMAT_BC5_TYPELESS = 82,
	DXGI_FORMAT_BC5_UNORM = 83,
	DXGI_FORMAT_BC5_SNORM = 84,
	DXGI_FORMAT_B5G6R5_UNORM = 85,
	DXGI_FORMAT_B5G5R5A1_UNORM = 86,
	DXGI_FORMAT_B8G8R8A8_UNORM = 87,
	DXGI_FORMAT_B8G8R8X8_UNORM = 88,
	DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
	DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
	DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
	DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
	DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
	DXGI_FORMAT_BC6H_TYPELESS = 94,
	DXGI_FORMAT_BC6H_UF16 = 95,
	DXGI_FORMAT_BC6H_SF16 = 96,
	DXGI_FORMAT_BC7_TYPELESS = 97,
	DXGI_FORMAT_BC7_UNORM = 98,
	DXGI_FORMAT_BC7_UNORM_SRGB = 99,
	DXGI_FORMAT_AYUV = 100,
	DXGI_FORMAT_Y410 = 101,
	DXGI_FORMAT_Y416 = 102,
	DXGI_FORMAT_NV12 = 103,
	DXGI_FORMAT_P010 = 104,
	DXGI_FORMAT_P016 = 105,
	DXGI_FORMAT_420_OPAQUE = 106,
	DXGI_FORMAT_YUY2 = 107,
	DXGI_FORMAT_Y210 = 108,
	DXGI_FORMAT_Y216 = 109,
	DXGI_FORMAT_NV11 = 110,
	DXGI_FORMAT_AI44 = 111,
	DXGI_FORMAT_IA44 = 112,
	DXGI_FORMAT_P8 = 113,
	DXGI_FORMAT_A8P8 = 114,
	DXGI_FORMAT_B4G4R4A4_UNORM = 115,

	DXGI_FORMAT_P208 = 130,
	DXGI_FORMAT_V208 = 131,
	DXGI_FORMAT_V408 = 132,
	DXGI_FORMAT_ASTC_4X4_TYPELESS = 133,
	DXGI_FORMAT_ASTC_4X4_UNORM = 134,
	DXGI_FORMAT_ASTC_4X4_UNORM_SRGB = 135,
	DXGI_FORMAT_ASTC_5X4_TYPELESS = 137,
	DXGI_FORMAT_ASTC_5X4_UNORM = 138,
	DXGI_FORMAT_ASTC_5X4_UNORM_SRGB = 139,
	DXGI_FORMAT_ASTC_5X5_TYPELESS = 141,
	DXGI_FORMAT_ASTC_5X5_UNORM = 142,
	DXGI_FORMAT_ASTC_5X5_UNORM_SRGB = 143,
	DXGI_FORMAT_ASTC_6X5_TYPELESS = 145,
	DXGI_FORMAT_ASTC_6X5_UNORM = 146,
	DXGI_FORMAT_ASTC_6X5_UNORM_SRGB = 147,
	DXGI_FORMAT_ASTC_6X6_TYPELESS = 149,
	DXGI_FORMAT_ASTC_6X6_UNORM = 150,
	DXGI_FORMAT_ASTC_6X6_UNORM_SRGB = 151,
	DXGI_FORMAT_ASTC_8X5_TYPELESS = 153,
	DXGI_FORMAT_ASTC_8X5_UNORM = 154,
	DXGI_FORMAT_ASTC_8X5_UNORM_SRGB = 155,
	DXGI_FORMAT_ASTC_8X6_TYPELESS = 157,
	DXGI_FORMAT_ASTC_8X6_UNORM = 158,
	DXGI_FORMAT_ASTC_8X6_UNORM_SRGB = 159,
	DXGI_FORMAT_ASTC_8X8_TYPELESS = 161,
	DXGI_FORMAT_ASTC_8X8_UNORM = 162,
	DXGI_FORMAT_ASTC_8X8_UNORM_SRGB = 163,
	DXGI_FORMAT_ASTC_10X5_TYPELESS = 165,
	DXGI_FORMAT_ASTC_10X5_UNORM = 166,
	DXGI_FORMAT_ASTC_10X5_UNORM_SRGB = 167,
	DXGI_FORMAT_ASTC_10X6_TYPELESS = 169,
	DXGI_FORMAT_ASTC_10X6_UNORM = 170,
	DXGI_FORMAT_ASTC_10X6_UNORM_SRGB = 171,
	DXGI_FORMAT_ASTC_10X8_TYPELESS = 173,
	DXGI_FORMAT_ASTC_10X8_UNORM = 174,
	DXGI_FORMAT_ASTC_10X8_UNORM_SRGB = 175,
	DXGI_FORMAT_ASTC_10X10_TYPELESS = 177,
	DXGI_FORMAT_ASTC_10X10_UNORM = 178,
	DXGI_FORMAT_ASTC_10X10_UNORM_SRGB = 179,
	DXGI_FORMAT_ASTC_12X10_TYPELESS = 181,
	DXGI_FORMAT_ASTC_12X10_UNORM = 182,
	DXGI_FORMAT_ASTC_12X10_UNORM_SRGB = 183,
	DXGI_FORMAT_ASTC_12X12_TYPELESS = 185,
	DXGI_FORMAT_ASTC_12X12_UNORM = 186,
	DXGI_FORMAT_ASTC_12X12_UNORM_SRGB = 187,

	DXGI_FORMAT_FORCE_UINT = 0xffffffffUL
};

enum ddpf {
	DDPF_ALPHAPIXELS = 0x1,
	DDPF_ALPHA = 0x2,
	DDPF_FOURCC = 0x4,
	DDPF_RGB = 0x40,
	DDPF_YUV = 0x200,
	DDPF_LUMINANCE = 0x20000,
	DDPF_LUMINANCE_ALPHA = DDPF_LUMINANCE | DDPF_ALPHA,
	DDPF_RGBAPIXELS = DDPF_RGB | DDPF_ALPHAPIXELS,
	DDPF_RGBA = DDPF_RGB | DDPF_ALPHA,
	DDPF_LUMINANCE_ALPHAPIXELS = DDPF_LUMINANCE | DDPF_ALPHAPIXELS,
};

enum dds_cubemap_flag {
	DDSCAPS2_CUBEMAP = 0x00000200,
	DDSCAPS2_CUBEMAP_POSITIVEX = 0x00000400,
	DDSCAPS2_CUBEMAP_NEGATIVEX = 0x00000800,
	DDSCAPS2_CUBEMAP_POSITIVEY = 0x00001000,
	DDSCAPS2_CUBEMAP_NEGATIVEY = 0x00002000,
	DDSCAPS2_CUBEMAP_POSITIVEZ = 0x00004000,
	DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x00008000,
	DDSCAPS2_VOLUME = 0x00200000
};

enum {
	DDSCAPS2_CUBEMAP_ALLFACES = DDSCAPS2_CUBEMAP_POSITIVEX | DDSCAPS2_CUBEMAP_NEGATIVEX | DDSCAPS2_CUBEMAP_POSITIVEY |
	DDSCAPS2_CUBEMAP_NEGATIVEY | DDSCAPS2_CUBEMAP_POSITIVEZ | DDSCAPS2_CUBEMAP_NEGATIVEZ
};

enum dds_flag {
	DDSD_CAPS = 0x00000001,
	DDSD_HEIGHT = 0x00000002,
	DDSD_WIDTH = 0x00000004,
	DDSD_PITCH = 0x00000008,
	DDSD_PIXELFORMAT = 0x00001000,
	DDSD_MIPMAPCOUNT = 0x00020000,
	DDSD_LINEARSIZE = 0x00080000,
	DDSD_DEPTH = 0x00800000
};

enum dds_surface_flag {
	DDSCAPS_COMPLEX = 0x00000008,
	DDSCAPS_MIPMAP = 0x00400000,
	DDSCAPS_TEXTURE = 0x00001000
};

struct dds_pixel_format {
	std::uint32_t size{ 32 };
	ddpf flags;
	d3dfmt magic;
	std::uint32_t bpp;
	glm::u32vec4 Mask;
};

static_assert(sizeof(dds_pixel_format) == 32);

struct dds_header {
	std::uint32_t Size;
	std::uint32_t Flags;
	std::uint32_t Height;
	std::uint32_t Width;
	std::uint32_t Pitch;
	std::uint32_t Depth;
	std::uint32_t MipMapLevels;
	std::uint32_t Reserved1[11];
	dds_pixel_format Format;
	std::uint32_t SurfaceFlags;
	std::uint32_t CubemapFlags;
	std::uint32_t Reserved2[3];
};

static_assert(sizeof(dds_header) == 124, "DDS Header size mismatch");

enum d3d10_resource_dimension {
	D3D10_RESOURCE_DIMENSION_UNKNOWN = 0,
	D3D10_RESOURCE_DIMENSION_BUFFER = 1,
	D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2,
	D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3,
	D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4
};

enum d3d10_resource_misc_flag {
	D3D10_RESOURCE_MISC_GENERATE_MIPS = 0x01,
	D3D10_RESOURCE_MISC_SHARED = 0x02,
	D3D10_RESOURCE_MISC_TEXTURECUBE = 0x04,
	D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x10,
	D3D10_RESOURCE_MISC_GDI_COMPATIBLE = 0x20,
};

enum dds_alpha_mode {
	DDS_ALPHA_MODE_UNKNOWN = 0x0,
	DDS_ALPHA_MODE_STRAIGHT = 0x1,
	DDS_ALPHA_MODE_PREMULTIPLIED = 0x2,
	DDS_ALPHA_MODE_OPAQUE = 0x3,
	DDS_ALPHA_MODE_CUSTOM = 0x4
};

struct dds_header10 {
	dds_header10() :
		Format(dxgi_format_dds::DXGI_FORMAT_UNKNOWN),
		ResourceDimension(D3D10_RESOURCE_DIMENSION_UNKNOWN),
		MiscFlag(0),
		ArraySize(0),
		AlphaFlags(DDS_ALPHA_MODE_UNKNOWN) {}

	dxgi_format_dds Format;
	d3d10_resource_dimension ResourceDimension;
	std::uint32_t MiscFlag; // D3D10_RESOURCE_MISC_GENERATE_MIPS
	std::uint32_t ArraySize;
	dds_alpha_mode AlphaFlags; // Should be 0 whenever possible to avoid D3D utility library to fail
};

static_assert(sizeof(dds_header10) == 20, "DDS DX10 Extended Header size mismatch");

struct ktx_header10 {
	std::uint32_t Endianness;
	std::uint32_t GLType;
	std::uint32_t GLTypeSize;
	std::uint32_t GLFormat;
	std::uint32_t GLInternalFormat;
	std::uint32_t GLBaseInternalFormat;
	std::uint32_t PixelWidth;
	std::uint32_t PixelHeight;
	std::uint32_t PixelDepth;
	std::uint32_t NumberOfArrayElements;
	std::uint32_t NumberOfFaces;
	std::uint32_t NumberOfMipmapLevels;
	std::uint32_t BytesOfKeyValueData;
};

enum internal_format {
	INTERNAL_RGB_UNORM = 0x1907,
	//GL_RGB
	INTERNAL_BGR_UNORM = 0x80E0,
	//GL_BGR
	INTERNAL_RGBA_UNORM = 0x1908,
	//GL_RGBA
	INTERNAL_BGRA_UNORM = 0x80E1,
	//GL_BGRA
	INTERNAL_BGRA8_UNORM = 0x93A1,
	//GL_BGRA8_EXT

	// unorm formats
	INTERNAL_R8_UNORM = 0x8229,
	//GL_R8
	INTERNAL_RG8_UNORM = 0x822B,
	//GL_RG8
	INTERNAL_RGB8_UNORM = 0x8051,
	//GL_RGB8
	INTERNAL_RGBA8_UNORM = 0x8058,
	//GL_RGBA8

	INTERNAL_R16_UNORM = 0x822A,
	//GL_R16
	INTERNAL_RG16_UNORM = 0x822C,
	//GL_RG16
	INTERNAL_RGB16_UNORM = 0x8054,
	//GL_RGB16
	INTERNAL_RGBA16_UNORM = 0x805B,
	//GL_RGBA16

	INTERNAL_RGB10A2_UNORM = 0x8059,
	//GL_RGB10_A2
	INTERNAL_RGB10A2_SNORM_EXT = 0xFFFC,

	// snorm formats
	INTERNAL_R8_SNORM = 0x8F94,
	//GL_R8_SNORM
	INTERNAL_RG8_SNORM = 0x8F95,
	//GL_RG8_SNORM
	INTERNAL_RGB8_SNORM = 0x8F96,
	//GL_RGB8_SNORM
	INTERNAL_RGBA8_SNORM = 0x8F97,
	//GL_RGBA8_SNORM

	INTERNAL_R16_SNORM = 0x8F98,
	//GL_R16_SNORM
	INTERNAL_RG16_SNORM = 0x8F99,
	//GL_RG16_SNORM
	INTERNAL_RGB16_SNORM = 0x8F9A,
	//GL_RGB16_SNORM
	INTERNAL_RGBA16_SNORM = 0x8F9B,
	//GL_RGBA16_SNORM

	// unsigned integer formats
	INTERNAL_R8U = 0x8232,
	//GL_R8UI
	INTERNAL_RG8U = 0x8238,
	//GL_RG8UI
	INTERNAL_RGB8U = 0x8D7D,
	//GL_RGB8UI
	INTERNAL_RGBA8U = 0x8D7C,
	//GL_RGBA8UI

	INTERNAL_R16U = 0x8234,
	//GL_R16UI
	INTERNAL_RG16U = 0x823A,
	//GL_RG16UI
	INTERNAL_RGB16U = 0x8D77,
	//GL_RGB16UI
	INTERNAL_RGBA16U = 0x8D76,
	//GL_RGBA16UI

	INTERNAL_R32U = 0x8236,
	//GL_R32UI
	INTERNAL_RG32U = 0x823C,
	//GL_RG32UI
	INTERNAL_RGB32U = 0x8D71,
	//GL_RGB32UI
	INTERNAL_RGBA32U = 0x8D70,
	//GL_RGBA32UI

	INTERNAL_RGB10A2U = 0x906F,
	//GL_RGB10_A2UI
	INTERNAL_RGB10A2I_EXT = 0xFFFB,

	// signed integer formats
	INTERNAL_R8I = 0x8231,
	//GL_R8I
	INTERNAL_RG8I = 0x8237,
	//GL_RG8I
	INTERNAL_RGB8I = 0x8D8F,
	//GL_RGB8I
	INTERNAL_RGBA8I = 0x8D8E,
	//GL_RGBA8I

	INTERNAL_R16I = 0x8233,
	//GL_R16I
	INTERNAL_RG16I = 0x8239,
	//GL_RG16I
	INTERNAL_RGB16I = 0x8D89,
	//GL_RGB16I
	INTERNAL_RGBA16I = 0x8D88,
	//GL_RGBA16I

	INTERNAL_R32I = 0x8235,
	//GL_R32I
	INTERNAL_RG32I = 0x823B,
	//GL_RG32I
	INTERNAL_RGB32I = 0x8D83,
	//GL_RGB32I
	INTERNAL_RGBA32I = 0x8D82,
	//GL_RGBA32I

	// Floating formats
	INTERNAL_R16F = 0x822D,
	//GL_R16F
	INTERNAL_RG16F = 0x822F,
	//GL_RG16F
	INTERNAL_RGB16F = 0x881B,
	//GL_RGB16F
	INTERNAL_RGBA16F = 0x881A,
	//GL_RGBA16F

	INTERNAL_R32F = 0x822E,
	//GL_R32F
	INTERNAL_RG32F = 0x8230,
	//GL_RG32F
	INTERNAL_RGB32F = 0x8815,
	//GL_RGB32F
	INTERNAL_RGBA32F = 0x8814,
	//GL_RGBA32F

	INTERNAL_R64F_EXT = 0xFFFA,
	//GL_R64F
	INTERNAL_RG64F_EXT = 0xFFF9,
	//GL_RG64F
	INTERNAL_RGB64F_EXT = 0xFFF8,
	//GL_RGB64F
	INTERNAL_RGBA64F_EXT = 0xFFF7,
	//GL_RGBA64F

	// sRGB formats
	INTERNAL_SR8 = 0x8FBD,
	//GL_SR8_EXT
	INTERNAL_SRG8 = 0x8FBE,
	//GL_SRG8_EXT
	INTERNAL_SRGB8 = 0x8C41,
	//GL_SRGB8
	INTERNAL_SRGB8_ALPHA8 = 0x8C43,
	//GL_SRGB8_ALPHA8

	// Packed formats
	INTERNAL_RGB9E5 = 0x8C3D,
	//GL_RGB9_E5
	INTERNAL_RG11B10F = 0x8C3A,
	//GL_R11F_G11F_B10F
	INTERNAL_RG3B2 = 0x2A10,
	//GL_R3_G3_B2
	INTERNAL_R5G6B5 = 0x8D62,
	//GL_RGB565
	INTERNAL_RGB5A1 = 0x8057,
	//GL_RGB5_A1
	INTERNAL_RGBA4 = 0x8056,
	//GL_RGBA4

	INTERNAL_RG4_EXT = 0xFFFE,

	// Luminance Alpha formats
	INTERNAL_LA4 = 0x8043,
	//GL_LUMINANCE4_ALPHA4
	INTERNAL_L8 = 0x8040,
	//GL_LUMINANCE8
	INTERNAL_A8 = 0x803C,
	//GL_ALPHA8
	INTERNAL_LA8 = 0x8045,
	//GL_LUMINANCE8_ALPHA8
	INTERNAL_L16 = 0x8042,
	//GL_LUMINANCE16
	INTERNAL_A16 = 0x803E,
	//GL_ALPHA16
	INTERNAL_LA16 = 0x8048,
	//GL_LUMINANCE16_ALPHA16

	// Depth formats
	INTERNAL_D16 = 0x81A5,
	//GL_DEPTH_COMPONENT16
	INTERNAL_D24 = 0x81A6,
	//GL_DEPTH_COMPONENT24
	INTERNAL_D16S8_EXT = 0xFFF6,
	INTERNAL_D24S8 = 0x88F0,
	//GL_DEPTH24_STENCIL8
	INTERNAL_D32 = 0x81A7,
	//GL_DEPTH_COMPONENT32
	INTERNAL_D32F = 0x8CAC,
	//GL_DEPTH_COMPONENT32F
	INTERNAL_D32FS8X24 = 0x8CAD,
	//GL_DEPTH32F_STENCIL8
	INTERNAL_S8_EXT = 0x8D48,
	//GL_STENCIL_INDEX8

	// Compressed formats
	INTERNAL_RGB_DXT1 = 0x83F0,
	//GL_COMPRESSED_RGB_S3TC_DXT1_EXT
	INTERNAL_RGBA_DXT1 = 0x83F1,
	//GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
	INTERNAL_RGBA_DXT3 = 0x83F2,
	//GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
	INTERNAL_RGBA_DXT5 = 0x83F3,
	//GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
	INTERNAL_R_ATI1N_UNORM = 0x8DBB,
	//GL_COMPRESSED_RED_RGTC1
	INTERNAL_R_ATI1N_SNORM = 0x8DBC,
	//GL_COMPRESSED_SIGNED_RED_RGTC1
	INTERNAL_RG_ATI2N_UNORM = 0x8DBD,
	//GL_COMPRESSED_RG_RGTC2
	INTERNAL_RG_ATI2N_SNORM = 0x8DBE,
	//GL_COMPRESSED_SIGNED_RG_RGTC2
	INTERNAL_RGB_BP_UNSIGNED_FLOAT = 0x8E8F,
	//GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
	INTERNAL_RGB_BP_SIGNED_FLOAT = 0x8E8E,
	//GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
	INTERNAL_RGB_BP_UNORM = 0x8E8C,
	//GL_COMPRESSED_RGBA_BPTC_UNORM
	INTERNAL_RGB_PVRTC_4BPPV1 = 0x8C00,
	//GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
	INTERNAL_RGB_PVRTC_2BPPV1 = 0x8C01,
	//GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
	INTERNAL_RGBA_PVRTC_4BPPV1 = 0x8C02,
	//GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
	INTERNAL_RGBA_PVRTC_2BPPV1 = 0x8C03,
	//GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
	INTERNAL_RGBA_PVRTC_4BPPV2 = 0x9137,
	//GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG
	INTERNAL_RGBA_PVRTC_2BPPV2 = 0x9138,
	//GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG
	INTERNAL_ATC_RGB = 0x8C92,
	//GL_ATC_RGB_AMD
	INTERNAL_ATC_RGBA_EXPLICIT_ALPHA = 0x8C93,
	//GL_ATC_RGBA_EXPLICIT_ALPHA_AMD
	INTERNAL_ATC_RGBA_INTERPOLATED_ALPHA = 0x87EE,
	//GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD

	INTERNAL_RGB_ETC = 0x8D64,
	//GL_COMPRESSED_RGB8_ETC1
	INTERNAL_RGB_ETC2 = 0x9274,
	//GL_COMPRESSED_RGB8_ETC2
	INTERNAL_RGBA_PUNCHTHROUGH_ETC2 = 0x9276,
	//GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
	INTERNAL_RGBA_ETC2 = 0x9278,
	//GL_COMPRESSED_RGBA8_ETC2_EAC
	INTERNAL_R11_EAC = 0x9270,
	//GL_COMPRESSED_R11_EAC
	INTERNAL_SIGNED_R11_EAC = 0x9271,
	//GL_COMPRESSED_SIGNED_R11_EAC
	INTERNAL_RG11_EAC = 0x9272,
	//GL_COMPRESSED_RG11_EAC
	INTERNAL_SIGNED_RG11_EAC = 0x9273,
	//GL_COMPRESSED_SIGNED_RG11_EAC

	INTERNAL_RGBA_ASTC_4x4 = 0x93B0,
	//GL_COMPRESSED_RGBA_ASTC_4x4_KHR
	INTERNAL_RGBA_ASTC_5x4 = 0x93B1,
	//GL_COMPRESSED_RGBA_ASTC_5x4_KHR
	INTERNAL_RGBA_ASTC_5x5 = 0x93B2,
	//GL_COMPRESSED_RGBA_ASTC_5x5_KHR
	INTERNAL_RGBA_ASTC_6x5 = 0x93B3,
	//GL_COMPRESSED_RGBA_ASTC_6x5_KHR
	INTERNAL_RGBA_ASTC_6x6 = 0x93B4,
	//GL_COMPRESSED_RGBA_ASTC_6x6_KHR
	INTERNAL_RGBA_ASTC_8x5 = 0x93B5,
	//GL_COMPRESSED_RGBA_ASTC_8x5_KHR
	INTERNAL_RGBA_ASTC_8x6 = 0x93B6,
	//GL_COMPRESSED_RGBA_ASTC_8x6_KHR
	INTERNAL_RGBA_ASTC_8x8 = 0x93B7,
	//GL_COMPRESSED_RGBA_ASTC_8x8_KHR
	INTERNAL_RGBA_ASTC_10x5 = 0x93B8,
	//GL_COMPRESSED_RGBA_ASTC_10x5_KHR
	INTERNAL_RGBA_ASTC_10x6 = 0x93B9,
	//GL_COMPRESSED_RGBA_ASTC_10x6_KHR
	INTERNAL_RGBA_ASTC_10x8 = 0x93BA,
	//GL_COMPRESSED_RGBA_ASTC_10x8_KHR
	INTERNAL_RGBA_ASTC_10x10 = 0x93BB,
	//GL_COMPRESSED_RGBA_ASTC_10x10_KHR
	INTERNAL_RGBA_ASTC_12x10 = 0x93BC,
	//GL_COMPRESSED_RGBA_ASTC_12x10_KHR
	INTERNAL_RGBA_ASTC_12x12 = 0x93BD,
	//GL_COMPRESSED_RGBA_ASTC_12x12_KHR

	// sRGB formats
	INTERNAL_SRGB_DXT1 = 0x8C4C,
	//GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
	INTERNAL_SRGB_ALPHA_DXT1 = 0x8C4D,
	//GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
	INTERNAL_SRGB_ALPHA_DXT3 = 0x8C4E,
	//GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
	INTERNAL_SRGB_ALPHA_DXT5 = 0x8C4F,
	//GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
	INTERNAL_SRGB_BP_UNORM = 0x8E8D,
	//GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
	INTERNAL_SRGB_PVRTC_2BPPV1 = 0x8A54,
	//GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT
	INTERNAL_SRGB_PVRTC_4BPPV1 = 0x8A55,
	//GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT
	INTERNAL_SRGB_ALPHA_PVRTC_2BPPV1 = 0x8A56,
	//GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT
	INTERNAL_SRGB_ALPHA_PVRTC_4BPPV1 = 0x8A57,
	//GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT
	INTERNAL_SRGB_ALPHA_PVRTC_2BPPV2 = 0x93F0,
	//COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG
	INTERNAL_SRGB_ALPHA_PVRTC_4BPPV2 = 0x93F1,
	//GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG
	INTERNAL_SRGB8_ETC2 = 0x9275,
	//GL_COMPRESSED_SRGB8_ETC2
	INTERNAL_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
	//GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
	INTERNAL_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
	//GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
	INTERNAL_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
	INTERNAL_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD,
	//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR

	INTERNAL_ALPHA8 = 0x803C,
	INTERNAL_ALPHA16 = 0x803E,
	INTERNAL_LUMINANCE8 = 0x8040,
	INTERNAL_LUMINANCE16 = 0x8042,
	INTERNAL_LUMINANCE8_ALPHA8 = 0x8045,
	INTERNAL_LUMINANCE16_ALPHA16 = 0x8048,

	INTERNAL_R8_USCALED_GTC = 0xF000,
	INTERNAL_R8_SSCALED_GTC,
	INTERNAL_RG8_USCALED_GTC,
	INTERNAL_RG8_SSCALED_GTC,
	INTERNAL_RGB8_USCALED_GTC,
	INTERNAL_RGB8_SSCALED_GTC,
	INTERNAL_RGBA8_USCALED_GTC,
	INTERNAL_RGBA8_SSCALED_GTC,
	INTERNAL_RGB10A2_USCALED_GTC,
	INTERNAL_RGB10A2_SSCALED_GTC,
	INTERNAL_R16_USCALED_GTC,
	INTERNAL_R16_SSCALED_GTC,
	INTERNAL_RG16_USCALED_GTC,
	INTERNAL_RG16_SSCALED_GTC,
	INTERNAL_RGB16_USCALED_GTC,
	INTERNAL_RGB16_SSCALED_GTC,
	INTERNAL_RGBA16_USCALED_GTC,
	INTERNAL_RGBA16_SSCALED_GTC,
};

enum external_format {
	EXTERNAL_NONE = 0,
	//GL_NONE
	EXTERNAL_RED = 0x1903,
	//GL_RED
	EXTERNAL_RG = 0x8227,
	//GL_RG
	EXTERNAL_RGB = 0x1907,
	//GL_RGB
	EXTERNAL_BGR = 0x80E0,
	//GL_BGR
	EXTERNAL_RGBA = 0x1908,
	//GL_RGBA
	EXTERNAL_BGRA = 0x80E1,
	//GL_BGRA
	EXTERNAL_RED_INTEGER = 0x8D94,
	//GL_RED_INTEGER
	EXTERNAL_RG_INTEGER = 0x8228,
	//GL_RG_INTEGER
	EXTERNAL_RGB_INTEGER = 0x8D98,
	//GL_RGB_INTEGER
	EXTERNAL_BGR_INTEGER = 0x8D9A,
	//GL_BGR_INTEGER
	EXTERNAL_RGBA_INTEGER = 0x8D99,
	//GL_RGBA_INTEGER
	EXTERNAL_BGRA_INTEGER = 0x8D9B,
	//GL_BGRA_INTEGER
	EXTERNAL_DEPTH = 0x1902,
	//GL_DEPTH_COMPONENT
	EXTERNAL_DEPTH_STENCIL = 0x84F9,
	//GL_DEPTH_STENCIL
	EXTERNAL_STENCIL = 0x1901,
	//GL_STENCIL_INDEX

	EXTERNAL_LUMINANCE = 0x1909,
	//GL_LUMINANCE
	EXTERNAL_ALPHA = 0x1906,
	//GL_ALPHA
	EXTERNAL_LUMINANCE_ALPHA = 0x190A,
	//GL_LUMINANCE_ALPHA

	EXTERNAL_SRGB_EXT = 0x8C40,
	//SRGB_EXT
	EXTERNAL_SRGB_ALPHA_EXT = 0x8C42 //SRGB_ALPHA_EXT
};

enum type_format {
	TYPE_NONE = 0,
	//GL_NONE
	TYPE_I8 = 0x1400,
	//GL_BYTE
	TYPE_U8 = 0x1401,
	//GL_UNSIGNED_BYTE
	TYPE_I16 = 0x1402,
	//GL_SHORT
	TYPE_U16 = 0x1403,
	//GL_UNSIGNED_SHORT
	TYPE_I32 = 0x1404,
	//GL_INT
	TYPE_U32 = 0x1405,
	//GL_UNSIGNED_INT
	TYPE_I64 = 0x140E,
	//GL_INT64_ARB
	TYPE_U64 = 0x140F,
	//GL_UNSIGNED_INT64_ARB
	TYPE_F16 = 0x140B,
	//GL_HALF_FLOAT
	TYPE_F16_OES = 0x8D61,
	//GL_HALF_FLOAT_OES
	TYPE_F32 = 0x1406,
	//GL_FLOAT
	TYPE_F64 = 0x140A,
	//GL_DOUBLE
	TYPE_UINT32_RGB9_E5_REV = 0x8C3E,
	//GL_UNSIGNED_INT_5_9_9_9_REV
	TYPE_UINT32_RG11B10F_REV = 0x8C3B,
	//GL_UNSIGNED_INT_10F_11F_11F_REV
	TYPE_UINT8_RG3B2 = 0x8032,
	//GL_UNSIGNED_BYTE_3_3_2
	TYPE_UINT8_RG3B2_REV = 0x8362,
	//GL_UNSIGNED_BYTE_2_3_3_REV
	TYPE_UINT16_RGB5A1 = 0x8034,
	//GL_UNSIGNED_SHORT_5_5_5_1
	TYPE_UINT16_RGB5A1_REV = 0x8366,
	//GL_UNSIGNED_SHORT_1_5_5_5_REV
	TYPE_UINT16_R5G6B5 = 0x8363,
	//GL_UNSIGNED_SHORT_5_6_5
	TYPE_UINT16_R5G6B5_REV = 0x8364,
	//GL_UNSIGNED_SHORT_5_6_5_REV
	TYPE_UINT16_RGBA4 = 0x8033,
	//GL_UNSIGNED_SHORT_4_4_4_4
	TYPE_UINT16_RGBA4_REV = 0x8365,
	//GL_UNSIGNED_SHORT_4_4_4_4_REV
	TYPE_UINT32_RGBA8 = 0x8035,
	//GL_UNSIGNED_SHORT_8_8_8_8
	TYPE_UINT32_RGBA8_REV = 0x8367,
	//GL_UNSIGNED_SHORT_8_8_8_8_REV
	TYPE_UINT32_RGB10A2 = 0x8036,
	//GL_UNSIGNED_INT_10_10_10_2
	TYPE_UINT32_RGB10A2_REV = 0x8368,
	//GL_UNSIGNED_INT_2_10_10_10_REV

	TYPE_UINT8_RG4_REV_GTC = 0xFFFD,
	TYPE_UINT16_A1RGB5_GTC = 0xFFFC
};

}

}
}
