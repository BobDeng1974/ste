
#type compute
#version 450

#include <hdr_common.glsl>

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0) uniform sampler2D hdr;

layout(r32f, binding = 1) restrict writeonly uniform image2D hdr_lums;
layout(std430, binding = 2) restrict buffer hdr_bokeh_parameters_buffer {
	hdr_bokeh_parameters params;
};

void main() {
	vec2 ts = textureSize(hdr, 0);

	vec4 lums0 = textureGather(hdr, (vec2(gl_GlobalInvocationID.xy) * 4 + vec2(0,0) + vec2(.5, .5)) / ts, 2);
	vec4 lums1 = textureGather(hdr, (vec2(gl_GlobalInvocationID.xy) * 4 + vec2(2,0) + vec2(.5, .5)) / ts, 2);
	vec4 lums2 = textureGather(hdr, (vec2(gl_GlobalInvocationID.xy) * 4 + vec2(2,2) + vec2(.5, .5)) / ts, 2);
	vec4 lums3 = textureGather(hdr, (vec2(gl_GlobalInvocationID.xy) * 4 + vec2(0,2) + vec2(.5, .5)) / ts, 2);
	vec4 ls = vec4(dot(lums0, vec4(.25f)),
				   dot(lums1, vec4(.25f)),
				   dot(lums2, vec4(.25f)),
				   dot(lums3, vec4(.25f)));
	float x = dot(ls, vec4(.25f));

	float l = hdr_lum(max(min_luminance, x));
	imageStore(hdr_lums, ivec2(gl_GlobalInvocationID.xy), l.xxxx);

	int int_l = floatBitsToInt(l);
	atomicMin(params.lum_min, int_l);
	atomicMax(params.lum_max, int_l);
}
