
#type compute
#version 450

layout(local_size_x = 128) in;

#include <indirect.glsl>
#include <light.glsl>
#include <renderer_transform_buffers.glsl>
#include <mesh_descriptor.glsl>

#include <intersection.glsl>

layout(std430, binding = 0) restrict writeonly buffer idb_data {
	indirect_multi_draw_elements_command idb[];
};

layout(push_constant) uniform mesh_descriptors_count_t {
	uint mesh_count;
};

void main() {
	int draw_id = int(gl_GlobalInvocationID.x);
	if (draw_id >= mesh_count)
		return;

	mesh_descriptor md = mesh_descriptor_buffer[draw_id];

	vec3 center_world = transform_model(md, md.bounding_sphere.xyz);
	vec3 center = transform_view(center_world);
	float radius = md.bounding_sphere.w;

	// Check if the geometry intersects some light's effective range
	bool add = false;
	for (int i = 0; i < ll_counter; ++i) {
		uint light_idx = ll[i];
		light_descriptor ld = light_buffer[light_idx];
		vec3 l = ld.transformed_position;
		
		if (light_type_is_directional(ld.type)) {
			// For directional lights need to check if geometry's "shadow" intersects the frustum
			// TODO
		}
		else { 
			// Check if the light effective range sphere intersects the geometry bounding sphere
			float lr = light_effective_range(ld);

			if (collision_sphere_sphere(l, lr, center, radius)) {
				//ttl[draw_id].entries[shadow_instance_count] = create_drawid_ttl_entry(uint(i), light_idx);
				//++shadow_instance_count;
				add = true;
				break;
			}
		}
	}

	// Generate indirect draw command
	indirect_multi_draw_elements_command c;
	c.index_count = uint(add) * mesh_draw_params_buffer[draw_id].count;
	c.instance_count = 1;
	c.first_index = mesh_draw_params_buffer[draw_id].first_index;
	c.vertex_offset = mesh_draw_params_buffer[draw_id].vertex_offset;
	c.base_instance = draw_id;
	idb[draw_id] = c;
}
