
#type compute
#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include <volumetric_scattering.glsl>
#include <atmospherics.glsl>

#include <light_transport.glsl>
#include <light.glsl>
#include <light_cascades.glsl>
#include <linked_light_lists.glsl>
#include <linearly_transformed_cosines.glsl>

#include <girenderer_transform_buffer.glsl>
#include <project.glsl>
#include <fast_rand.glsl>

layout(std430, binding = 2) restrict readonly buffer light_data {
	light_descriptor light_buffer[];
};

layout(r8ui,  binding = 5) restrict readonly uniform uimage2D lll_size;
layout(r32ui, binding = 6) restrict readonly uniform uimage2D lll_heads;
layout(std430, binding = 11) restrict readonly buffer lll_data {
	lll_element lll_buffer[];
};

layout(std430, binding = 8) restrict readonly buffer shaped_lights_points_data {
	ltc_element ltc_points[];
};

layout(rgba16f, binding = 7) restrict uniform image3D volume;

#include <linked_light_lists_load.glsl>
#include <cosine_distribution_integration.glsl>

layout(location = 0) uniform samplerCubeArrayShadow shadow_depth_maps;
layout(location = 1) uniform sampler2DArrayShadow directional_shadow_depth_maps;
uniform samplerCubeArray shadow_maps;
uniform sampler2DArray directional_shadow_maps;

layout(location = 2) uniform sampler2DArray atmospheric_optical_length_lut;

layout(location = 3) uniform sampler2D downsampled_depth_map;
layout(location = 4) uniform sampler2D depth_map;

#include <shadow.glsl>

const float samples = 2.f;

void depth_limits_3x3(vec2 uv, int lod, out float mind, out float maxd) {
	vec2 d00 = textureLodOffset(downsampled_depth_map, uv, lod, ivec2(-1,-1)).xy;
	vec2 d10 = textureLodOffset(downsampled_depth_map, uv, lod, ivec2( 0,-1)).xy;
	vec2 d20 = textureLodOffset(downsampled_depth_map, uv, lod, ivec2( 1,-1)).xy;
	vec2 d01 = textureLodOffset(downsampled_depth_map, uv, lod, ivec2(-1, 0)).xy;
	vec2 d11 = textureLod(downsampled_depth_map, uv, lod).xy;
	vec2 d21 = textureLodOffset(downsampled_depth_map, uv, lod, ivec2( 1, 0)).xy;
	vec2 d02 = textureLodOffset(downsampled_depth_map, uv, lod, ivec2(-1, 1)).xy;
	vec2 d12 = textureLodOffset(downsampled_depth_map, uv, lod, ivec2( 0, 1)).xy;
	vec2 d22 = textureLodOffset(downsampled_depth_map, uv, lod, ivec2( 1, 1)).xy;
	
	float mind1 = min(min(d00.x, d10.x), min(d20.x, d01.x));
	float mind2 = min(min(d11.x, d21.x), min(d02.x, d12.x));
	mind = min(mind1, mind2, d22.x);
	
	float maxd1 = min(min(d00.y, d10.y), min(d20.y, d01.y));
	float maxd2 = min(min(d11.y, d21.y), min(d02.y, d12.y));
	maxd = max(maxd1, maxd2, d22.y);
}

vec2 seed_scattering(vec2 slice_coords, uint light_idx, float s, float depth) {
	return slice_coords + vec2(light_idx + s * .1f, depth);
}

vec2 slice_coords_to_fragcoords(vec2 v) {
	return (v + vec2(.5f)) * float(volumetric_scattering_tile_size) / vec2(backbuffer_size());
}

vec3 integrate_light_cross_section(vec3 wp, light_descriptor ld, float dist, vec3 wl) {
	if (light_type_is_point(ld.type))
		return virtual_light_attenuation(ld, dist).xxx;

	// Read light shape
	bool shape_sphere = light_shape_is_sphere(ld.type);
	bool shape_quad = light_shape_is_quad(ld.type);
	bool shape_polygon = light_shape_is_polygon(ld.type);
	bool shape_polyhedron = light_shape_is_convex_polyhedron(ld.type);
		
	// And properties
	bool two_sided = light_type_is_two_sided(ld.type);
	bool textured = light_type_is_textured(ld.type);

	// Points count and offset into points buffer
	uint points_count = light_get_polygon_point_counts(ld);
	uint points_offset = light_get_polygon_point_offset(ld);
		
	// Light position
	vec3 L = ld.position;
	
	vec3 specular_irradiance;
	vec3 diffuse_irradiance;
	if (shape_sphere) {
		float r = ld.radius;
		return integrate_cosine_distribution_sphere_cross_section(dist, r).xxx;
	}
	else if (shape_quad) {
		return integrate_cosine_distribution_quad(wp, wl, L, points_offset, two_sided);
	}
	else if (shape_polygon) {
		return integrate_cosine_distribution_polygon(wp, wl, L, points_count, points_offset, two_sided);
	}
	else /*if (shape_polyhedron)*/ {
		// Polyhedron light. Primitives are always triangles.
		uint primitives = points_count / 3;
		return integrate_cosine_distribution_convex_polyhedron(wp, wl, L, primitives, points_offset);
	}
}

vec3 scatter_light(vec2 slice_coords,
				   vec3 position,
				   vec3 w_pos,
				   float thickness,
				   light_descriptor ld,
				   uint shadowmap_idx) {
	vec3 l = w_pos - ld.position;
	float shadow = shadow_test(shadow_depth_maps,
							   shadowmap_idx,
							   l,
							   vec3(0,1,0), vec3(0,1,0),
							   ld.radius,
							   light_effective_range(ld));
	if (shadow <= .0f)
		return vec3(0);

	float l_dist = length(l);
	vec3 atten = integrate_light_cross_section(w_pos, ld, l_dist, l/l_dist); 
	if (all(lessThanEqual(atten, vec3(.0f))))
		return vec3(.0f);
	
	vec3 lux = irradiance(ld) * atten;
	return shadow * lux * scatter(ld.position, w_pos, eye_position(),
								  thickness,
								  atmospheric_optical_length_lut);
}

vec3 scatter_directional_light(vec2 slice_coords,
							   vec3 position,
							   vec3 w_pos,
							   float thickness,
							   light_descriptor ld,
							   light_cascade_data cascade_data,
							   int shadowmap_idx) {	
	float shadow = shadow_test(directional_shadow_depth_maps,
							   shadowmap_idx,
							   position,
							   vec3(0,1,0), vec3(0,1,0),
							   cascade_data);
	if (shadow <= .0f)
		return vec3(0);

	float atten = integrate_cosine_distribution_sphere_cross_section(light_directional_distance(ld), ld.radius);
	vec3 lux = irradiance(ld) * atten;
	return shadow * lux * scatter_ray(eye_position(), w_pos, -ld.position,
									  thickness,
									  atmospheric_optical_length_lut);
}

bool generate_sample(vec2 slice_coords, float s, 
					 float depth, float depth_next_tile, float z0, float z2,
					 uint light_idx,
					 out vec3 position, out vec3 w_pos) {
	// Generate a seed
	vec2 seed = seed_scattering(slice_coords, light_idx, s, depth);

	// Generate a random number, and use it to generate a pseudo-random sampling point
	float r = fast_rand(seed);

	// Use some noise to generate 2 more pseudo-random numbers from r. Use them to generate the xy sampling coordinates.
	vec2 noise = vec2(65198.10937f, 22109.532971f);
	vec2 jitter = fract(r * noise);
	vec2 coords = slice_coords_to_fragcoords(vec2(slice_coords) + jitter - vec2(.5f));

	// Check depth buffer
	float d = texture(depth_map, coords).x;
	//if (d > depth)
	//	return false;
	d = min(d, depth);

	float next_d = max(d, depth_next_tile);
	float z1 = unproject_depth(next_d);

	float z = mix(z0, z1, r);

	position = unproject_screen_position_with_z(z, coords);
	w_pos = transform_view_to_world_space(position);

	return true;
}

vec3 scatter(float depth, float depth_next_tile, ivec2 slice_coords,
			 light_descriptor ld, uint light_idx, uint ll_idx,
			 uint cascade_idx, inout int cascade, inout float current_cascade_far_clip) {
	float z0 = unproject_depth(depth);
	float z2 = unproject_depth(depth_next_tile);
	float thickness = abs(z0 - z2);

	vec3 position, w_pos;

	// Scatter
	vec3 scattered = vec3(0);
	if (light_type_is_directional(ld.type)) {
		// For directional lights, first update cascade if needed
		if (-z0 >= current_cascade_far_clip) {
			++cascade;
			current_cascade_far_clip = cascades_depths[cascade];
		}
		
		for (float s = 0; s < samples; ++s) {
			generate_sample(slice_coords, s, 
							depth, depth_next_tile, z0, z2,
							light_idx,
							position, w_pos);

			scattered += scatter_directional_light(slice_coords,
												   position,
												   w_pos,
												   thickness,
												   ld,
												   light_cascades[cascade_idx].cascades[cascade],
												   light_get_cascade_shadowmap_idx(ld, cascade));
		}
	}
	else {
		for (float s = 0; s < samples; ++s) {
			generate_sample(slice_coords, s, 
							depth, depth_next_tile, z0, z2,
							light_idx,
							position, w_pos);

			scattered += scatter_light(slice_coords,
									   position,
									   w_pos,
									   thickness,
									   ld,
									   ll_idx);
		}
	}

	return scattered / samples;
}

void main() {
	// Read work coordinates
	ivec3 volume_size = imageSize(volume);
	ivec2 slice_coords = ivec2(gl_GlobalInvocationID.xy);
	if (any(greaterThanEqual(slice_coords, volume_size.xy)))
		return;

	// Query depth of geometry at current work coordinates and limit end tile respectively
	int depth_lod = lll_depth_lod;
	float depth_buffer_d_min, depth_buffer_d_max;
	depth_limits_3x3((vec2(slice_coords) + vec2(.5f)) / vec2(volume_size.xy), depth_lod, depth_buffer_d_min, depth_buffer_d_max);

	float effective_tiles_start = max(volumetric_scattering_tile_for_depth(depth_buffer_d_max) - 2.f, 0.f);
	float effective_tiles_end = min(volumetric_scattering_tile_for_depth(depth_buffer_d_min) + 1.f, float(volumetric_scattering_depth_tiles));
	
	// Loop through per-pixel linked-light-list
	uint lll_start = imageLoad(lll_heads, slice_coords).x;
	uint lll_length = imageLoad(lll_size, slice_coords).x;
	for (uint lll_ptr = lll_start; lll_ptr != lll_start + lll_length; ++lll_ptr) {
		lll_element lll_p = lll_buffer[lll_ptr];
			
		vec2 lll_depth_range = lll_parse_depth_range(lll_p);
		uint light_idx = uint(lll_parse_light_idx(lll_p));
		uint ll_idx = uint(lll_parse_ll_idx(lll_p));
		light_descriptor ld = light_buffer[light_idx];
		
		// Cascade data used for directional lights
		uint cascade_idx = light_get_cascade_descriptor_idx(ld);
		int cascade = 0;
		float current_cascade_far_clip = cascades_depths[0];
		
		// Compute tight limits on tiles to sample based on pp-lll depth ranges
		float tiles_effected_by_light_start = volumetric_scattering_tile_for_depth(lll_depth_range.y);
		float tiles_effected_by_light_end = volumetric_scattering_tile_for_depth(lll_depth_range.x);
	
		// Iterate over the tiles and accumulate up to the effective tiles
		vec3 accum = vec3(.0f);
		float tile_start = floor(tiles_effected_by_light_start);
		float tile = tile_start;
		float depth = volumetric_scattering_depth_for_tile(tile);
		for (; tile <= effective_tiles_end; ++tile) {
			// For each tile, generate tile information and scatter
			ivec3 volume_coords = ivec3(slice_coords, int(tile + .5f));
			float depth_next_tile = volumetric_scattering_depth_for_tile(tile + 1.f);

			if (tile <= tiles_effected_by_light_end)
				accum += scatter(depth, depth_next_tile, slice_coords, 
								 ld, light_idx, ll_idx, 
								 cascade_idx, cascade, current_cascade_far_clip);

			vec3 stored_rgb = imageLoad(volume, volume_coords).rgb;
			imageStore(volume, volume_coords, vec4(stored_rgb + accum, .0f));

			// Next depth
			depth = depth_next_tile;
		}
	}
}
