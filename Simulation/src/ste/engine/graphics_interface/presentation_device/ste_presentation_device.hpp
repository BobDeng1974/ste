//	StE
// © Shlomi Steinberg 2015-2016

#pragma once

#include <stdafx.hpp>

#include <ste_window.hpp>
#include <vk_physical_device_descriptor.hpp>

#include <ste_engine_exceptions.hpp>
#include <ste_gl_context_creation_parameters.hpp>
#include <ste_presentation_surface.hpp>
#include <ste_gl_context.hpp>
#include <ste_gl_device_queue.hpp>

#include <memory>
#include <vector>

namespace StE {
namespace GL {

template <typename QueueProtocol>
class ste_presentation_device {
private:
	using queue_t = std::unique_ptr<ste_gl_device_queue>;

private:
	const ste_gl_presentation_device_creation_parameters parameters;
	vk_logical_device presentation_device;
	ste_presentation_surface presentation_surface;

	std::vector<queue_t> device_queues;
	unsigned main_queue_idx{ 0 };
	unsigned compute_queue_idx{ 0 };
	unsigned transfer_queue_idx{ 0 };

private:
	static auto create_vk_virtual_device(const GL::vk_physical_device_descriptor &physical_device,
										 const VkPhysicalDeviceFeatures &requested_features,
										 std::vector<const char*> device_extensions = {}) {
		// Add required extensions
		device_extensions.push_back("VK_KHR_swapchain");

		// Request queues based on supplied protocol
		std::vector<VkDeviceQueueCreateInfo> queues_create_infos;
		auto queue_descriptors = QueueProtocol::queues_for_physical_device(physical_device);
		queues_create_infos.resize(queue_descriptors.size());
		for (int i = 0; i < queue_descriptors.size(); ++i)
			queues_create_infos[i] = queue_descriptors[i].create_device_queue_create_info();

		// Create logical device
		GL::vk_logical_device device(physical_device,
									 requested_features,
									 queues_create_infos,
									 device_extensions);

		return device;
	}

	void setup_queues_indices(const std::vector<ste_gl_queue_descriptor> &queues) {
		main_queue_idx =
			std::find_if(queues.begin(), queues.end(),
						 [](const ste_gl_queue_descriptor &q) { return q.usage == ste_gl_queue_usage::main_queue; }) - queues.begin();
		assert(main_queue_idx < queues.size());

		compute_queue_idx =
			std::find_if(queues.begin(), queues.end(),
						 [](const ste_gl_queue_descriptor &q) { return q.usage == ste_gl_queue_usage::compute_queue; }) - queues.begin();
		transfer_queue_idx =
			std::find_if(queues.begin(), queues.end(),
						 [](const ste_gl_queue_descriptor &q) { return q.usage == ste_gl_queue_usage::data_transfer_queue; }) - queues.begin();

		if (compute_queue_idx == queues.size())
			compute_queue_idx = std::find_if(queues.begin(), queues.end(),
											 [](const ste_gl_queue_descriptor &q) { return q.usage == ste_gl_queue_usage::main_queue; }) - queues.begin();
		if (transfer_queue_idx == queues.size())
			transfer_queue_idx = std::find_if(queues.begin(), queues.end(),
											  [](const ste_gl_queue_descriptor &q) { return q.usage == ste_gl_queue_usage::main_queue; }) - queues.begin();
	}

public:
	ste_presentation_device(const ste_gl_presentation_device_creation_parameters &parameters,
							const ste_gl_context &gl_ctx,
							const ste_window &presentation_window)
		: parameters(parameters),
		presentation_device(create_vk_virtual_device(parameters.physical_device,
													 parameters.requested_device_features,
													 parameters.additional_device_extensions)),
		presentation_surface(parameters, &presentation_device, presentation_window, gl_ctx.instance())
	{
		// Read queue descriptors as generated by the supplied protocol
		auto queue_descriptors = QueueProtocol::queues_for_physical_device(parameters.physical_device);

		// Read indices of our queues
		setup_queues_indices(queue_descriptors);

		// Create queues
		for (auto &d : queue_descriptors)
			device_queues.push_back(std::make_unique<queue_t::element_type>(presentation_device, d));
	}
	~ste_presentation_device() noexcept {}

	ste_presentation_device(ste_presentation_device &&) = default;
	ste_presentation_device &operator=(ste_presentation_device &&) = default;

	auto& surface() { return presentation_surface; }
	auto& surface() const { return presentation_surface; }
	auto& device() const { return presentation_device; }

	auto& get_main_queue() const { return *device_queues[main_queue_idx]; }
	auto& get_presenter_queue() const { return *device_queues[main_queue_idx]; }
	auto& get_compute_queue() const { return *device_queues[compute_queue_idx]; }
	auto& get_transfer_queue() const { return *device_queues[transfer_queue_idx]; }
};

}
}
