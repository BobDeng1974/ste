// StE
// Â© Shlomi Steinberg, 2015-2016

#pragma once

#include <GLFW/glfw3.h>

#include "hid.hpp"

namespace StE {
namespace HID {

class keyboard {
public:
	enum class K {
		KeyUknown = -1,
		KeySPACE = GLFW_KEY_SPACE,
		KeyAPOSTROPHE = GLFW_KEY_APOSTROPHE,
		KeyCOMMA = GLFW_KEY_COMMA,
		KeyMINUS = GLFW_KEY_MINUS,
		KeyPERIOD = GLFW_KEY_PERIOD,
		KeySLASH = GLFW_KEY_SLASH,
		Key0 = GLFW_KEY_0,
		Key1 = GLFW_KEY_1,
		Key2 = GLFW_KEY_2,
		Key3 = GLFW_KEY_3,
		Key4 = GLFW_KEY_4,
		Key5 = GLFW_KEY_5,
		Key6 = GLFW_KEY_6,
		Key7 = GLFW_KEY_7,
		Key8 = GLFW_KEY_8,
		Key9 = GLFW_KEY_9,
		KeySEMICOLON = GLFW_KEY_SEMICOLON,
		KeyEQUAL = GLFW_KEY_EQUAL,
		KeyA = GLFW_KEY_A,
		KeyB = GLFW_KEY_B,
		KeyC = GLFW_KEY_C,
		KeyD = GLFW_KEY_D,
		KeyE = GLFW_KEY_E,
		KeyF = GLFW_KEY_F,
		KeyG = GLFW_KEY_G,
		KeyH = GLFW_KEY_H,
		KeyI = GLFW_KEY_I,
		KeyJ = GLFW_KEY_J,
		KeyK = GLFW_KEY_K,
		KeyL = GLFW_KEY_L,
		KeyM = GLFW_KEY_M,
		KeyN = GLFW_KEY_N,
		KeyO = GLFW_KEY_O,
		KeyP = GLFW_KEY_P,
		KeyQ = GLFW_KEY_Q,
		KeyR = GLFW_KEY_R,
		KeyS = GLFW_KEY_S,
		KeyT = GLFW_KEY_T,
		KeyU = GLFW_KEY_U,
		KeyV = GLFW_KEY_V,
		KeyW = GLFW_KEY_W,
		KeyX = GLFW_KEY_X,
		KeyY = GLFW_KEY_Y,
		KeyZ = GLFW_KEY_Z,
		KeyLEFT_BRACKET = GLFW_KEY_LEFT_BRACKET,
		KeyBACKSLASH = GLFW_KEY_BACKSLASH,
		KeyRIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET,
		KeyGRAVE_ACCENT = GLFW_KEY_GRAVE_ACCENT,
		KeyWORLD_1 = GLFW_KEY_WORLD_1,
		KeyWORLD_2 = GLFW_KEY_WORLD_2,

		/* Function keys */
		KeyESCAPE = GLFW_KEY_ESCAPE,
		KeyENTER = GLFW_KEY_ENTER,
		KeyTAB = GLFW_KEY_TAB,
		KeyBACKSPACE = GLFW_KEY_BACKSPACE,
		KeyINSERT = GLFW_KEY_INSERT,
		KeyDELETE = GLFW_KEY_DELETE,
		KeyRIGHT = GLFW_KEY_RIGHT,
		KeyLEFT = GLFW_KEY_LEFT,
		KeyDOWN = GLFW_KEY_DOWN,
		KeyUP = GLFW_KEY_UP,
		KeyPAGE_UP = GLFW_KEY_PAGE_UP,
		KeyPAGE_DOWN = GLFW_KEY_PAGE_DOWN,
		KeyHOME = GLFW_KEY_HOME,
		KeyEND = GLFW_KEY_END,
		KeyCAPS_LOCK = GLFW_KEY_CAPS_LOCK,
		KeySCROLL_LOCK = GLFW_KEY_SCROLL_LOCK,
		KeyNUM_LOCK = GLFW_KEY_NUM_LOCK,
		KeyPRINT_SCREEN = GLFW_KEY_PRINT_SCREEN,
		KeyPAUSE = GLFW_KEY_PAUSE,
		KeyF1 = GLFW_KEY_F1,
		KeyF2 = GLFW_KEY_F2,
		KeyF3 = GLFW_KEY_F3,
		KeyF4 = GLFW_KEY_F4,
		KeyF5 = GLFW_KEY_F5,
		KeyF6 = GLFW_KEY_F6,
		KeyF7 = GLFW_KEY_F7,
		KeyF8 = GLFW_KEY_F8,
		KeyF9 = GLFW_KEY_F9,
		KeyF10 = GLFW_KEY_F10,
		KeyF11 = GLFW_KEY_F11,
		KeyF12 = GLFW_KEY_F12,
		KeyF13 = GLFW_KEY_F13,
		KeyF14 = GLFW_KEY_F14,
		KeyF15 = GLFW_KEY_F15,
		KeyF16 = GLFW_KEY_F16,
		KeyF17 = GLFW_KEY_F17,
		KeyF18 = GLFW_KEY_F18,
		KeyF19 = GLFW_KEY_F19,
		KeyF20 = GLFW_KEY_F20,
		KeyF21 = GLFW_KEY_F21,
		KeyF22 = GLFW_KEY_F22,
		KeyF23 = GLFW_KEY_F23,
		KeyF24 = GLFW_KEY_F24,
		KeyF25 = GLFW_KEY_F25,
		KeyKP_0 = GLFW_KEY_KP_0,
		KeyKP_1 = GLFW_KEY_KP_1,
		KeyKP_2 = GLFW_KEY_KP_2,
		KeyKP_3 = GLFW_KEY_KP_3,
		KeyKP_4 = GLFW_KEY_KP_4,
		KeyKP_5 = GLFW_KEY_KP_5,
		KeyKP_6 = GLFW_KEY_KP_6,
		KeyKP_7 = GLFW_KEY_KP_7,
		KeyKP_8 = GLFW_KEY_KP_8,
		KeyKP_9 = GLFW_KEY_KP_9,
		KeyKP_DECIMAL = GLFW_KEY_KP_DECIMAL,
		KeyKP_DIVIDE = GLFW_KEY_KP_DIVIDE,
		KeyKP_MULTIPLY = GLFW_KEY_KP_MULTIPLY,
		KeyKP_SUBTRACT = GLFW_KEY_KP_SUBTRACT,
		KeyKP_ADD = GLFW_KEY_KP_ADD,
		KeyKP_ENTER = GLFW_KEY_KP_ENTER,
		KeyKP_EQUAL = GLFW_KEY_KP_EQUAL,
		KeyLEFT_SHIFT = GLFW_KEY_LEFT_SHIFT,
		KeyLEFT_CONTROL = GLFW_KEY_LEFT_CONTROL,
		KeyLEFT_ALT = GLFW_KEY_LEFT_ALT,
		KeyLEFT_SUPER = GLFW_KEY_LEFT_SUPER,
		KeyRIGHT_SHIFT = GLFW_KEY_RIGHT_SHIFT,
		KeyRIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL,
		KeyRIGHT_ALT = GLFW_KEY_RIGHT_ALT,
		KeyRIGHT_SUPER = GLFW_KEY_RIGHT_SUPER,
		KeyMENU = GLFW_KEY_MENU,
	};

	static K convert_key(int key) { return static_cast<K>(key); }

	static HID::Status key_status(GLFWwindow *window, K k) { return HID::convert_status(glfwGetKey(window, static_cast<int>(k))); }
};

}
}
